#!/usr/bin/env python
# coding=utf-8

from __future__ import print_function

import json
import os
import re
import sys
import logging
import logging.handlers
import traceback

from inqbus.ocf.generic.agent import Agent
from inqbus.ocf.generic.handlers import Handler
from inqbus.ocf.generic import parameter, exits

import boto3
from urllib2 import urlopen
from botocore.exceptions import ClientError


# http://www.linux-ha.org/doc/dev-guides/ra-dev-guide.html


def is_valid_ip(ip):
    m = re.match(r'^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$', ip)
    res = bool(m) and all(map(lambda n: 0 <= int(n) <= 255, m.groups()))
    if not res:
        logger.trace("%s is not valid IP" % ip)

    return res


class Logger(logging.getLoggerClass()):
    def __init__(self, name, level=logging.NOTSET):
        super(Logger, self).__init__(name, level)

    def trace(self, msg, *args, **kwargs):
        if self.isEnabledFor(logging.TRACE):
            self._log(logging.TRACE, msg, args, **kwargs)

    def exception(self, msg, *args, **kwargs):
        logger.trace("Send trap to zabbix here")

        return super(Logger, self).exception(msg, *args, **kwargs)


class ColorizingStreamHandler(logging.StreamHandler):
    BLACK = '\033[0;30m'
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    BROWN = '\033[0;33m'
    BLUE = '\033[0;34m'
    PURPLE = '\033[0;35m'
    CYAN = '\033[0;36m'
    GREY = '\033[0;37m'

    DARK_GREY = '\033[1;30m'
    LIGHT_RED = '\033[1;31m'
    LIGHT_GREEN = '\033[1;32m'
    YELLOW = '\033[1;33m'
    LIGHT_BLUE = '\033[1;34m'
    LIGHT_PURPLE = '\033[1;35m'
    LIGHT_CYAN = '\033[1;36m'
    WHITE = '\033[1;37m'

    DIM = '\033[2m'
    BOLD = '\033[1m'
    BLINK = '\033[5m'

    RESET = "\033[0m"

    TRACE = "%s" % (DARK_GREY)
    DEBUG = "%s%s" % (LIGHT_CYAN, DIM)
    INFO = "%s%s" % (GREEN, DIM)
    WARNING = "%s%s" % (YELLOW, BOLD)
    ERROR = "%s" % RED
    CRITICAL = "%s%s%s" % (BLINK, RED, BOLD)

    def __init__(self, *args, **kwargs):
        self._colors = {logging.TRACE: self.TRACE,
                        logging.DEBUG: self.DEBUG,
                        logging.INFO: self.INFO,
                        logging.WARNING: self.WARNING,
                        logging.ERROR: self.ERROR,
                        logging.CRITICAL: self.CRITICAL}
        super(ColorizingStreamHandler, self).__init__(*args, **kwargs)

    @property
    def is_tty(self):
        # isatty = getattr(self.stream, 'isatty', None)
        # return isatty and isatty()
        return True

    def emit(self, record):
        try:
            message = self.format(record)
            stream = self.stream
            if not self.is_tty:
                stream.write(message)
            else:
                message = self._colors[record.levelno] + message + self.RESET
                stream.write(message)
            stream.write(getattr(self, 'terminator', '\n'))
            self.flush()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)

    def setLevelColor(self, logging_level, escaped_ansi_code):
        self._colors[logging_level] = escaped_ansi_code


class AWSEC2AssignPrivateIPAddress(Agent):
    name = "aws-ec2-assign-private-ip-addresses.py"
    longdesc = "Assign private ip addresses to AWS EC2 instance"
    shortdesc = "Assign private ip addresses to AWS EC2 instance"

    def config(self):
        self.handlers['start'] = Handler(AWSEC2AssignPrivateIPAddress.do_start, 10)
        self.handlers['stop'] = Handler(AWSEC2AssignPrivateIPAddress.do_stop, 10)
        self.handlers['monitor'] = Handler(AWSEC2AssignPrivateIPAddress.do_monitor, 10)

        self.params["ip"] = parameter.OCFString(
            longdesc="IP address",
            shortdesc="IP address",
            required=True,
            validate=AWSEC2AssignPrivateIPAddress.validate_ip
        )

    def validate_ip(self, parameter):
        if not is_valid_ip(parameter.value):
            raise exits.OCF_ERR_ARGS("IP %s is not valid" % parameter.value)

        return True

    def init(self):
        try:
            self.ip = self.params["ip"].value

            self.aws_document = json.loads(urlopen('http://169.254.169.254/latest/dynamic/instance-identity/document').read())
            self.aws_instanceid = self.aws_document['instanceId']
            self.aws_region_id = self.aws_document['region']

            self.ec2 = boto3.client(service_name='ec2', region_name=self.aws_region_id)

            self.aws_describe_instance = self.ec2.describe_instances(InstanceIds=[self.aws_instanceid])
            self.aws_net_if = self.aws_describe_instance['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0][
                'NetworkInterfaceId']

        except Exception as e:
            logger.exception(e.message)
            raise exits.OCF_ERR_GENERIC(e.message)

    def do_start(self):
        try:
            self.ec2.assign_private_ip_addresses(
                AllowReassignment=True,
                NetworkInterfaceId=self.aws_net_if,
                PrivateIpAddresses=[self.ip]
            )
        except Exception as e:
            logger.exception(e.message)
            raise exits.OCF_ERR_GENERIC(e.message)

    def do_stop(self):
        try:
            self.do_monitor()
            print("Going to unassign IP %s from %s netif %s" % (self.ip, self.aws_instanceid, self.aws_net_if), file=sys.stderr)
            self.ec2.unassign_private_ip_addresses(
                NetworkInterfaceId=self.aws_net_if,
                PrivateIpAddresses=[self.ip]
            )
        except exits.OCF_NOT_RUNNING:
            pass

        except Exception as e:
            logger.exception(e.message)
            raise exits.OCF_ERR_GENERIC(e.message)

    def do_monitor(self):
        try:
            for i in self.aws_describe_instance['Reservations'][0]['Instances'][0]['NetworkInterfaces'][0]['PrivateIpAddresses']:
                if i['PrivateIpAddress'] == self.ip:
                    print("IP %s is assigned to my instance %s" % (self.ip, self.aws_instanceid), file=sys.stderr)
                    return True

        except Exception as e:
            logger.exception(e.message)
            raise exits.OCF_ERR_GENERIC(e.message)

        raise exits.OCF_NOT_RUNNING("IP %s is not assigned to %s" % (self.ip, self.aws_instanceid))


if __name__ == "__main__":
    logging.TRACE = 5
    logging.setLoggerClass(Logger)
    logging.addLevelName(logging.TRACE, "TRACE")

    formatter = logging.Formatter('%(levelname)-5s %(module)s %(funcName)s(%(lineno)d): %(message)s')
    colorHandler = ColorizingStreamHandler(sys.stderr)
    colorHandler.setLevel(0)
    colorHandler.setFormatter(formatter)

    syslog_formatter = logging.Formatter(
        '1 %(asctime)s.%(msecs)06dZ - aws-ec2-assign-private-ip-addresses %(process)d - %(funcName)s(%(lineno)d): %(message)s',
        datefmt='%Y-%m-%dT%T')
    syslog = logging.handlers.SysLogHandler(facility=logging.handlers.SysLogHandler.LOG_LOCAL0)
    syslog.setLevel(0)
    syslog.setFormatter(syslog_formatter)

    root_logger = logging.getLogger()
    root_logger.addHandler(syslog)
    root_logger.setLevel(0)

    logger = logging.getLogger(__name__)
    logger.setLevel(logging.TRACE)
    logger.addHandler(colorHandler)

    boto3.set_stream_logger(name="boto3-logger", level=logging.TRACE)

    # handler = urllib2.HTTPHandler(debuglevel=1)
    # opener = urllib2.build_opener(handler)
    # urllib2.install_opener(opener)
    try:
        AWSEC2AssignPrivateIPAddress().run(sys.argv)

    except Exception as e:
        logger.exception(e.message)
        exit(1)

    except SystemExit as se:
        exit(se.code)

    except:
        exit(255)